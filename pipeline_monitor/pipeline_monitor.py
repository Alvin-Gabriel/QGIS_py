# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PipelineMonitor
                                 A QGIS plugin
 用于监控管线测试桩电压并进行可视化展示
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2025 by LSY
        email                : 2256124857@qq.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
import logging  # Import the logging module
import traceback

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .pipeline_monitor_dialog import (
    PipelineMonitorDialog,
    QgsMessageLogHandler,
)
import os.path

# # Get a logger for the main plugin class # REMOVED: Module-level logger is moved to instance level
# PLUGIN_LOGGER = logging.getLogger("PipelineMonitorPlugin")
# PLUGIN_LOGGER.setLevel(logging.DEBUG)
# # Configure logging to QGIS message bar if not already set up
# if not any(isinstance(h, QgsMessageLogHandler) for h in PLUGIN_LOGGER.handlers):
#     qgis_handler = QgsMessageLogHandler()
#     formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
#     qgis_handler.setFormatter(formatter)
#     PLUGIN_LOGGER.addHandler(qgis_handler)
#     PLUGIN_LOGGER.propagate = False # Prevent messages from going to root logger


class PipelineMonitor:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        # PLUGIN_LOGGER.debug("PipelineMonitor plugin __init__ called.") # Replaced with instance logger
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "PipelineMonitor_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&管线监控工具")
        self.dlg = None  # Initialize dialog instance to None
        self.plugin_logger = None  # Initialize instance logger

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("PipelineMonitor", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # Setup instance logger here to ensure it's always correctly configured on plugin load/reload
        if self.plugin_logger is None:
            self.plugin_logger = logging.getLogger("PipelineMonitorPlugin")
            self.plugin_logger.setLevel(logging.DEBUG)
            # Add QgsMessageLogHandler if not already present
            if not any(
                isinstance(h, QgsMessageLogHandler) for h in self.plugin_logger.handlers
            ):
                qgis_handler = QgsMessageLogHandler()
                formatter = logging.Formatter(
                    "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
                )
                qgis_handler.setFormatter(formatter)
                self.plugin_logger.addHandler(qgis_handler)
                self.plugin_logger.propagate = False

        self.plugin_logger.debug("PipelineMonitor plugin initGui called.")

        icon_path = ":/plugins/pipeline_monitor/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("管线监控"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    def unload(self):
        if self.plugin_logger:
            self.plugin_logger.debug("PipelineMonitor plugin unload called.")
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&管线监控工具"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.plugin_logger:
            self.plugin_logger.debug("PipelineMonitor plugin run called.")
        """当点击工具栏按钮或菜单项时运行"""
        # Ensure the dialog is created only once and re-used
        if not hasattr(self, "dlg") or self.dlg is None or not self.dlg.isVisible():
            if self.plugin_logger:
                self.plugin_logger.debug(
                    "Dialog instance not found, is None, or not visible. Creating new dialog."
                )
            # 创建对话框实例，并将主窗口作为父级
            self.dlg = PipelineMonitorDialog(self.iface.mainWindow())
            # 将QGIS的iface接口传递给对话框，以便对话框能访问地图画布等
            self.dlg.set_iface(self.iface)
            # 实现首次打开时自动加载数据
            self.dlg.load_and_display_data()

            # 在加载数据完成后再初始化底图
            try:
                if hasattr(self.dlg, "baseMapComboBox"):
                    current_index = self.dlg.baseMapComboBox.currentIndex()
                    if self.plugin_logger:
                        self.plugin_logger.debug(
                            f"准备切换底图，选择索引: {current_index}"
                        )
                    # 确保底图图层已正确初始化
                    if not self.dlg.base_map_layers:
                        self.plugin_logger.debug(
                            "底图尚未初始化，调用 initialize_base_maps"
                        )
                        self.dlg.initialize_base_maps()
                    self.dlg.switch_base_map(current_index)
            except Exception as e:
                if self.plugin_logger:
                    self.plugin_logger.error(f"初始化底图时出现错误: {str(e)}")
        else:
            if self.plugin_logger:
                self.plugin_logger.debug(
                    "Dialog instance already exists and is visible. Bringing to front."
                )
            # If dialog already exists and is visible, bring it to front
            self.dlg.show()
            self.dlg.raise_()
            self.dlg.activateWindow()

        # 显示对话框 (ensure it's visible even if it was just created or was hidden)
        self.dlg.show()
